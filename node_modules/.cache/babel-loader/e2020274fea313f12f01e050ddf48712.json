{"ast":null,"code":"import _slicedToArray from \"/Users/hofheins/Desktop/projects/hwgame/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/hofheins/Desktop/projects/hwgame/src/components/Cards.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Images } from \"./Images\";\nexport default function Cards() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        image = _useState2[0],\n        setImage = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        currentScore = _useState4[0],\n        setScore = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        topScore = _useState6[0],\n        setHigh = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        rightWrong = _useState8[0],\n        setrightWrong = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        clicked = _useState10[0],\n        setClicked = _useState10[1];\n\n  const handleReset = () => {\n    setScore(currentScore);\n    setrightWrong(\"poop\");\n    setClicked([]);\n    shuffleFriends();\n  };\n\n  const imageArray = async () => {\n    const res = await {\n      Images\n    };\n    const copyarray = res.Images;\n    setImage(copyarray);\n  };\n\n  useEffect(() => {\n    imageArray();\n  }, []);\n\n  const handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      rightWrong: \"\"\n    });\n\n    if (newScore >= this.state.topScore) {\n      this.setState({\n        topScore: newScore\n      });\n    } else if (newScore === 12) {\n      this.setState({\n        rightWrong: \"You win!\"\n      });\n    }\n\n    this.handleShuffle();\n  };\n\n  const shuffleFriends = () => {\n    const newarr = [...image];\n    newarr.slice();\n    newarr.sort(() => Math.random() - 0.5);\n    setImage(newarr);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"centerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, image.map(image => React.createElement(\"div\", {\n    key: image.name,\n    className: \"card\",\n    onClick: () => {\n      shuffleFriends();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    // ref={ref}\n    className: \"cardImage\",\n    src: image.cardImage,\n    alt: \"hi\",\n    id: image.navItemId // alt={image.name}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/Users/hofheins/Desktop/projects/hwgame/src/components/Cards.js"],"names":["React","useState","useEffect","Images","Cards","image","setImage","currentScore","setScore","topScore","setHigh","rightWrong","setrightWrong","clicked","setClicked","handleReset","shuffleFriends","imageArray","res","copyarray","handleIncrement","newScore","state","setState","handleShuffle","newarr","slice","sort","Math","random","map","name","cardImage","navItemId"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA,oBACJH,QAAQ,CAAC,EAAD,CADJ;AAAA;AAAA,QACvBI,KADuB;AAAA,QAChBC,QADgB;;AAAA,qBAEGL,QAAQ,CAAC,CAAD,CAFX;AAAA;AAAA,QAEvBM,YAFuB;AAAA,QAETC,QAFS;;AAAA,qBAGFP,QAAQ,CAAC,CAAD,CAHN;AAAA;AAAA,QAGvBQ,QAHuB;AAAA,QAGbC,OAHa;;AAAA,qBAIMT,QAAQ,CAAC,EAAD,CAJd;AAAA;AAAA,QAIvBU,UAJuB;AAAA,QAIXC,aAJW;;AAAA,qBAKAX,QAAQ,CAAC,EAAD,CALR;AAAA;AAAA,QAKvBY,OALuB;AAAA,QAKdC,UALc;;AAO9B,QAAMC,WAAW,GAAG,MAAM;AACxBP,IAAAA,QAAQ,CAACD,YAAD,CAAR;AACAK,IAAAA,aAAa,CAAC,MAAD,CAAb;AACAE,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,IAAAA,cAAc;AACf,GALD;;AAOA,QAAMC,UAAU,GAAG,YAAY;AAC7B,UAAMC,GAAG,GAAG,MAAM;AAAEf,MAAAA;AAAF,KAAlB;AACA,UAAMgB,SAAS,GAAGD,GAAG,CAACf,MAAtB;AACAG,IAAAA,QAAQ,CAACa,SAAD,CAAR;AACD,GAJD;;AAMAjB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMG,eAAe,GAAG,MAAM;AAC5B,UAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWf,YAAX,GAA0B,CAA3C;AACA,SAAKgB,QAAL,CAAc;AACZhB,MAAAA,YAAY,EAAEc,QADF;AAEZV,MAAAA,UAAU,EAAE;AAFA,KAAd;;AAIA,QAAIU,QAAQ,IAAI,KAAKC,KAAL,CAAWb,QAA3B,EAAqC;AACnC,WAAKc,QAAL,CAAc;AAAEd,QAAAA,QAAQ,EAAEY;AAAZ,OAAd;AACD,KAFD,MAEO,IAAIA,QAAQ,KAAK,EAAjB,EAAqB;AAC1B,WAAKE,QAAL,CAAc;AAAEZ,QAAAA,UAAU,EAAE;AAAd,OAAd;AACD;;AACD,SAAKa,aAAL;AACD,GAZD;;AAcA,QAAMR,cAAc,GAAG,MAAM;AAC3B,UAAMS,MAAM,GAAG,CAAC,GAAGpB,KAAJ,CAAf;AACAoB,IAAAA,MAAM,CAACC,KAAP;AACAD,IAAAA,MAAM,CAACE,IAAP,CAAY,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAlC;AACAvB,IAAAA,QAAQ,CAACmB,MAAD,CAAR;AACD,GALD;;AAOA,SACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpB,KAAK,CAACyB,GAAN,CAAUzB,KAAK,IACd;AACE,IAAA,GAAG,EAAEA,KAAK,CAAC0B,IADb;AAEE,IAAA,SAAS,EAAC,MAFZ;AAGE,IAAA,OAAO,EAAE,MAAM;AACbf,MAAAA,cAAc;AACf,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AACE;AACA,IAAA,SAAS,EAAC,WAFZ;AAGE,IAAA,GAAG,EAAEX,KAAK,CAAC2B,SAHb;AAIE,IAAA,GAAG,EAAC,IAJN;AAKE,IAAA,EAAE,EAAE3B,KAAK,CAAC4B,SALZ,CAME;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADD,CADH,CADF;AAqBD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Images } from \"./Images\";\n\nexport default function Cards() {\n  const [image, setImage] = useState([]);\n  const [currentScore, setScore] = useState(0);\n  const [topScore, setHigh] = useState(0);\n  const [rightWrong, setrightWrong] = useState(\"\");\n  const [clicked, setClicked] = useState([]);\n\n  const handleReset = () => {\n    setScore(currentScore);\n    setrightWrong(\"poop\");\n    setClicked([]);\n    shuffleFriends();\n  };\n\n  const imageArray = async () => {\n    const res = await { Images };\n    const copyarray = res.Images;\n    setImage(copyarray);\n  };\n\n  useEffect(() => {\n    imageArray();\n  }, []);\n\n  const handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      rightWrong: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    } else if (newScore === 12) {\n      this.setState({ rightWrong: \"You win!\" });\n    }\n    this.handleShuffle();\n  };\n\n  const shuffleFriends = () => {\n    const newarr = [...image];\n    newarr.slice();\n    newarr.sort(() => Math.random() - 0.5);\n    setImage(newarr);\n  };\n\n  return (\n    <div className='centerContainer'>\n      {image.map(image => (\n        <div\n          key={image.name}\n          className='card'\n          onClick={() => {\n            shuffleFriends();\n          }}>\n          <img\n            // ref={ref}\n            className='cardImage'\n            src={image.cardImage}\n            alt='hi'\n            id={image.navItemId}\n            // alt={image.name}\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}