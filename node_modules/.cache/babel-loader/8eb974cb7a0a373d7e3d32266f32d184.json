{"ast":null,"code":"import _slicedToArray from \"/Users/hofheins/Desktop/projects/hwgame/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/hofheins/Desktop/projects/hwgame/src/components/Cards.js\";\nimport React, { useState, useEffect, useRef, useReducer } from \"react\";\nimport { Images } from \"./Images\";\nexport default function Cards() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        image = _useState2[0],\n        setImage = _useState2[1];\n\n  const ref = useRef();\n\n  const imageArray = async () => {\n    const res = await {\n      Images\n    };\n    const copyarray = res.Images;\n    setImage(copyarray);\n  };\n\n  useEffect(() => {\n    imageArray();\n  }, []);\n\n  const game = () => {\n    const newarr = [...image];\n    newarr.slice();\n    newarr.sort(() => Math.random() - 0.5);\n    setImage(newarr);\n  };\n\n  const _useState3 = useState(\"0\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isselected = _useState4[0],\n        setSelected = _useState4[1]; // const runme = () => {\n  //   let fun = ref.current.classList.add(\"selected\");\n  //   console.log(fun);\n  //   console.log(ref.current.className);\n  // };\n\n\n  const check = () => {\n    console.log(ref.current);\n\n    if (ref.current.classList.contains(\"selected\")) {\n      console.log(\"yes\");\n    } else {\n      ref.current.classList.add(\"selected\");\n      console.log(\"no\");\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"centerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, image.map(image => React.createElement(\"div\", {\n    key: image.navItemId,\n    ref: ref,\n    className: \"card\",\n    onClick: () => {\n      game(); // runme();\n\n      check();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"cardImage\",\n    src: image.cardImage,\n    alt: image.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }))), \";\");\n}","map":{"version":3,"sources":["/Users/hofheins/Desktop/projects/hwgame/src/components/Cards.js"],"names":["React","useState","useEffect","useRef","useReducer","Images","Cards","image","setImage","ref","imageArray","res","copyarray","game","newarr","slice","sort","Math","random","isselected","setSelected","check","console","log","current","classList","contains","add","map","navItemId","cardImage","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,UAA7C,QAA+D,OAA/D;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA,oBACJL,QAAQ,CAAC,EAAD,CADJ;AAAA;AAAA,QACvBM,KADuB;AAAA,QAChBC,QADgB;;AAE9B,QAAMC,GAAG,GAAGN,MAAM,EAAlB;;AAEA,QAAMO,UAAU,GAAG,YAAY;AAC7B,UAAMC,GAAG,GAAG,MAAM;AAAEN,MAAAA;AAAF,KAAlB;AACA,UAAMO,SAAS,GAAGD,GAAG,CAACN,MAAtB;AACAG,IAAAA,QAAQ,CAACI,SAAD,CAAR;AACD,GAJD;;AAMAV,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMG,IAAI,GAAG,MAAM;AACjB,UAAMC,MAAM,GAAG,CAAC,GAAGP,KAAJ,CAAf;AACAO,IAAAA,MAAM,CAACC,KAAP;AACAD,IAAAA,MAAM,CAACE,IAAP,CAAY,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAlC;AACAV,IAAAA,QAAQ,CAACM,MAAD,CAAR;AACD,GALD;;AAd8B,qBAqBIb,QAAQ,CAAC,GAAD,CArBZ;AAAA;AAAA,QAqBvBkB,UArBuB;AAAA,QAqBXC,WArBW,kBAuB9B;AACA;AACA;AACA;AACA;;;AAEA,QAAMC,KAAK,GAAG,MAAM;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYd,GAAG,CAACe,OAAhB;;AACA,QAAIf,GAAG,CAACe,OAAJ,CAAYC,SAAZ,CAAsBC,QAAtB,CAA+B,UAA/B,CAAJ,EAAgD;AAC9CJ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,KAFD,MAEO;AACLd,MAAAA,GAAG,CAACe,OAAJ,CAAYC,SAAZ,CAAsBE,GAAtB,CAA0B,UAA1B;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD;AACF,GARD;;AAUA,SACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGhB,KAAK,CAACqB,GAAN,CAAUrB,KAAK,IACd;AACE,IAAA,GAAG,EAAEA,KAAK,CAACsB,SADb;AAEE,IAAA,GAAG,EAAEpB,GAFP;AAGE,IAAA,SAAS,EAAC,MAHZ;AAIE,IAAA,OAAO,EAAE,MAAM;AACbI,MAAAA,IAAI,GADS,CAEb;;AACAQ,MAAAA,KAAK;AACN,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,GAAG,EAAEd,KAAK,CAACuB,SAAtC;AAAiD,IAAA,GAAG,EAAEvB,KAAK,CAACwB,IAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADD,CADH,MADF;AAkBD","sourcesContent":["import React, { useState, useEffect, useRef, useReducer } from \"react\";\nimport { Images } from \"./Images\";\n\nexport default function Cards() {\n  const [image, setImage] = useState([]);\n  const ref = useRef();\n\n  const imageArray = async () => {\n    const res = await { Images };\n    const copyarray = res.Images;\n    setImage(copyarray);\n  };\n\n  useEffect(() => {\n    imageArray();\n  }, []);\n\n  const game = () => {\n    const newarr = [...image];\n    newarr.slice();\n    newarr.sort(() => Math.random() - 0.5);\n    setImage(newarr);\n  };\n\n  const [isselected, setSelected] = useState(\"0\");\n\n  // const runme = () => {\n  //   let fun = ref.current.classList.add(\"selected\");\n  //   console.log(fun);\n  //   console.log(ref.current.className);\n  // };\n\n  const check = () => {\n    console.log(ref.current);\n    if (ref.current.classList.contains(\"selected\")) {\n      console.log(\"yes\");\n    } else {\n      ref.current.classList.add(\"selected\");\n      console.log(\"no\");\n    }\n  };\n\n  return (\n    <div className='centerContainer'>\n      {image.map(image => (\n        <div\n          key={image.navItemId}\n          ref={ref}\n          className='card'\n          onClick={() => {\n            game();\n            // runme();\n            check();\n          }}>\n          <img className='cardImage' src={image.cardImage} alt={image.name} />\n        </div>\n      ))}\n      ;\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}